# ServiceAccount for Auth Microservice
apiVersion: v1
kind: ServiceAccount
metadata:
  name: auth-service-sa
  namespace: default

---

# Role for accessing necessary Kubernetes resources
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: auth-service-role
rules:
  - apiGroups: [""]
    resources: ["pods", "pods/log", "services"]
    verbs: ["get", "list", "create", "update", "delete"]

---

# RoleBinding to bind the ServiceAccount to the Role
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: auth-service-binding
  namespace: default
subjects:
  - kind: ServiceAccount
    name: auth-service-sa
    namespace: default
roleRef:
  kind: Role
  name: auth-service-role
  apiGroup: rbac.authorization.k8s.io

---

# Deployment for the Auth Microservice
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      serviceAccountName: auth-service-sa
      containers:
        - name: auth-service
          image: shwetik/auth-service:v1.3
          ports:
            - containerPort: 3000  # Container port
          env:
            - name: DATABASE_URL
              value: "<DB-URL>"
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: auth-service-secret
                  key: jwtSecret
            - name: JWT_EXPIRES_IN
              value: "1h"
            - name: EMAIL_USER
              value: "<EMAIL-USER>"
            - name: EMAIL_PASS
              valueFrom:
                secretKeyRef:
                  name: auth-service-secret
                  key: emailPass
            - name: REDIS_HOST
              value: "redis"
            - name: REDIS_PORT
              value: "6379"
            - name: USER_MANAGEMENT_URL
              value: "http://user-management-service:80"  # User Management service URL
      imagePullSecrets:
        - name: regcred2

---

# Service for exposing Auth Microservice internally
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: default
spec:
  selector:
    app: auth-service
  ports:
    - protocol: TCP
      port: 80  # External service port
      targetPort: 3000  # Container port
  type: ClusterIP

---

# Secret for sensitive data (e.g., JWT Secret and email password)
apiVersion: v1
kind: Secret
metadata:
  name: auth-service-secret
  namespace: default
type: Opaque
data:
  jwtSecret: <base64-Secret>
  emailPass: <base64-Pass>

---

# ClusterRole and ClusterRoleBinding for anonymous user access (optional, for public endpoints)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: allow-anonymous-signin
rules:
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "create", "post"]
    resourceNames: ["auth-service"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: allow-anonymous-signin-binding
subjects:
  - kind: User
    name: system:anonymous
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: allow-anonymous-signin
  apiGroup: rbac.authorization.k8s.io
